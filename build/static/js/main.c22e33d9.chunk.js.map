{"version":3,"sources":["components/ConfigApp.js","components/Hash.js","components/Player.js","components/App.js","serviceWorker.js","index.js"],"names":["scopes","Hash","window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","Player","props","backgroundStyles","backgroundImage","album","images","url","progressBarStyles","width","progress_ms","duration_ms","className","src","name","artists","is_playing","style","App","state","token","id","getCurrentlyPlaying","bind","_token","access_token","this","setState","$","type","beforeSend","xhr","setRequestHeader","success","data","href","join","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c22e33d9.chunk.js","sourcesContent":["export const authEndpoint = \"https://accounts.spotify.com/authorize\";\n\n// App's client ID, redirect URI and desired scopes\nexport const clientId = \"f38787012cf04fbf9953ed6a3e1f2a9a\";\nexport const redirectUri = \"http://localhost:3000/\";\nexport const scopes = [\n  \"user-top-read\",\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n];\n","// Get the hash of the url\nconst Hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function (initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default Hash;\n","import React from \"react\";\nimport \"../styles/Player.css\";\n\nconst Player = (props) => {\n  const backgroundStyles = {\n    backgroundImage: `url(${props.item.album.images[0].url})`,\n  };\n\n  const progressBarStyles = {\n    width: (props.progress_ms * 100) / props.item.duration_ms + \"%\",\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-wrapper\">\n        <div className=\"now-playing__img\">\n          <img src={props.item.album.images[0].url} />\n        </div>\n        <div className=\"now-playing__side\">\n          <div className=\"now-playing__name\">{props.item.name}</div>\n          <div className=\"now-playing__artist\">\n            {props.item.artists[0].name}\n          </div>\n          <div className=\"now-playing__status\">\n            {props.is_playing ? \"Playing\" : \"Paused\"}\n          </div>\n          <div className=\"progress\">\n            <div className=\"progress__bar\" style={progressBarStyles} />\n          </div>\n        </div>\n        <div className=\"background\" style={backgroundStyles} />{\" \"}\n      </div>\n    </div>\n  );\n};\n\nexport default Player;\n","import React, { Component } from \"react\";\nimport * as $ from \"jquery\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./ConfigApp\";\nimport hash from \"./Hash\";\nimport Player from \"./Player\";\nimport \"../styles/App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: \"\" }],\n        },\n        name: \"\",\n        artists: [{ name: \"\" }],\n        duration_ms: 0,\n        id: \"\",\n        // popularity: 0,\n      },\n      is_playing: \"Paused\",\n      progress_ms: 0,\n    };\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n  }\n\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token,\n      });\n      this.getCurrentlyPlaying(_token);\n      // this.getStatsOnCurrentlyPlaying(_token);\n    }\n  }\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    $.ajax({\n      url: \"https://api.spotify.com/v1/me/player\",\n      type: \"GET\",\n      beforeSend: (xhr) => {\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n      },\n      success: (data) => {\n        this.setState({\n          item: data.item,\n          is_playing: data.is_playing,\n          progress_ms: data.progress_ms,\n          id: data.item.id,\n          // popularity: data.item.popularity,\n        });\n      },\n    });\n  }\n\n  // getStatsOnCurrentlyPlaying(token, _track_id) {\n  //   // Make a call using the token\n  //   $.ajax({\n  //     // url: `https://api.spotify.com/v1/audio-features/${_track_id}`,\n  //     // url: \"https://api.spotify.com/v1/audio-features/11dFghVXANMlKmJXsNCbNl\",\n  //     type: \"GET\",\n  //     beforeSend: (xhr) => {\n  //       xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n  //     },\n  //     success: (d) => {\n  //       this.setState({\n  //         danceability: d.danceability,\n  //       });\n  //     },\n  //   });\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/*  */}\n          <h1>Spotified React</h1>\n          <p className=\"descrip\">\n            Spot what you're currently listening to... Because why not?\n          </p>\n          {!this.state.token && (\n            <a\n              className=\"btn btn--loginApp-link\"\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                \"%20\"\n              )}&response_type=token&show_dialog=true`}\n            >\n              Log into Spotify\n            </a>\n          )}\n          {this.state.token && (\n            <Player\n              item={this.state.item}\n              is_playing={this.state.is_playing}\n              progress_ms={this.progress_ms}\n              id={this.state.id}\n              // popularity={this.state.popularity}\n            />\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}